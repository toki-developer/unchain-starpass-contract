/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { SocialNetwork, SocialNetworkInterface } from "../SocialNetwork";
import type { PromiseOrValue } from "../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "getLastPostId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_postId",
        type: "uint256",
      },
    ],
    name: "getPost",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "postId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "author",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "totalLikes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "time",
            type: "uint256",
          },
        ],
        internalType: "struct ISocialNetwork.PostDetail",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "order",
        type: "uint256",
      },
    ],
    name: "getPosts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "postId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "author",
            type: "address",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "totalLikes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "time",
            type: "uint256",
          },
        ],
        internalType: "struct ISocialNetwork.PostDetail[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_postId",
        type: "uint256",
      },
    ],
    name: "like",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "post",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_postId",
        type: "uint256",
      },
    ],
    name: "unlike",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e75806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638ee93cf3116100505780638ee93cf3146100d5578063d5ccb909146100e8578063e82935da146100fe57600080fd5b80631d45cddc1461007757806340731c24146100a057806374d21ae0146100c0575b600080fd5b61008a610085366004610a80565b610111565b6040516100979190610b1b565b60405180910390f35b6100b36100ae366004610a80565b6104d6565b6040516100979190610b7d565b6100d36100ce366004610a80565b610520565b005b6100d36100e3366004610bad565b610705565b6100f06107c9565b604051908152602001610097565b6100d361010c366004610a80565b61082f565b606081600114158015610125575081600214155b8015610132575081600314155b801561013f575081600414155b156101915760405162461bcd60e51b815260206004820152601560248201527f4f726465722076616c75652069732077726f6e672e000000000000000000000060448201526064015b60405180910390fd5b6000805467ffffffffffffffff8111156101ad576101ad610b97565b60405190808252806020026020018201604052801561021957816020015b6102066040518060a001604052806000815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b8152602001906001900390816101cb5790505b50905060005b6000548110156104cf5760006102348261091c565b905084600103610261578083838151811061025157610251610c5e565b60200260200101819052506104bb565b8460020361029857808383600160008054905061027e9190610c8a565b6102889190610c8a565b8151811061025157610251610c5e565b846003036103b457816000036102cd5780836000815181106102bc576102bc610c5e565b6020026020010181905250506104bd565b8160005b8381101561031c578481815181106102eb576102eb610c5e565b6020026020010151606001518360600151111561030a5780915061031c565b8061031481610c9d565b9150506102d1565b50600061032a600185610c8a565b90505b81811061038f5784818151811061034657610346610c5e565b60200260200101518582600161035c9190610cb6565b8151811061036c5761036c610c5e565b6020908102919091010152801561038f578061038781610cc9565b91505061032d565b50818482815181106103a3576103a3610c5e565b6020026020010181905250506104bb565b846004036104bb57816000036103d85780836000815181106102bc576102bc610c5e565b8160005b83811015610427578481815181106103f6576103f6610c5e565b6020026020010151606001518360600151101561041557809150610427565b8061041f81610c9d565b9150506103dc565b506000610435600185610c8a565b90505b81811061049a5784818151811061045157610451610c5e565b6020026020010151858260016104679190610cb6565b8151811061047757610477610c5e565b6020908102919091010152801561049a578061049281610cc9565b915050610438565b50818482815181106104ae576104ae610c5e565b6020026020010181905250505b505b806104c781610c9d565b91505061021f565b5092915050565b6105116040518060a001604052806000815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b61051a8261091c565b92915050565b60001960005b60008381526001602052604090205481101561058f57600083815260016020526040902080543391908390811061055f5761055f610c5e565b6000918252602090912001546001600160a01b03160361057d578091505b8061058781610c9d565b915050610526565b5060001981036105e15760405162461bcd60e51b815260206004820152601160248201527f4e6f7420616c7265616479206c696b65640000000000000000000000000000006044820152606401610188565b805b6000838152600160208190526040909120546105ff9190610c8a565b8110156106b457600083815260016020819052604090912090610623908390610cb6565b8154811061063357610633610c5e565b60009182526020808320909101548583526001909152604090912080546001600160a01b03909216918390811061066c5761066c610c5e565b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055806106ac81610c9d565b9150506105e3565b5060008281526001602052604090208054806106d2576106d2610ce0565b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff191690550190555050565b604080516060810182523381526020810183815242928201929092526000805460018101825590805281517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636003909202918201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117815592519192839290917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56401906107b89082610d7f565b506040820151816002015550505050565b60008054810361081b5760405162461bcd60e51b815260206004820152601560248201527f506f73747320646f6573206e6f742065786973742e00000000000000000000006044820152606401610188565b60005461082a90600190610c8a565b905090565b60005b6000828152600160205260409020548110156108df57600082815260016020526040902080543391908390811061086b5761086b610c5e565b6000918252602090912001546001600160a01b0316036108cd5760405162461bcd60e51b815260206004820152600d60248201527f416c7265616479206c696b6564000000000000000000000000000000000000006044820152606401610188565b806108d781610c9d565b915050610832565b506000908152600160208181526040832080549283018155835290912001805473ffffffffffffffffffffffffffffffffffffffff191633179055565b6109576040518060a001604052806000815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b600080838154811061096b5761096b610c5e565b6000918252602091829020604080516060810190915260039092020180546001600160a01b0316825260018101805492939192918401916109ab90610cf6565b80601f01602080910402602001604051908101604052809291908181526020018280546109d790610cf6565b8015610a245780601f106109f957610100808354040283529160200191610a24565b820191906000526020600020905b815481529060010190602001808311610a0757829003601f168201915b5050509183525050600291909101546020918201526040805160a08101825286815283516001600160a01b0316818401528383015181830152600096875260019092529485902054606082015293015160808401525090919050565b600060208284031215610a9257600080fd5b5035919050565b80518252600060206001600160a01b03818401511681850152604083015160a0604086015280518060a087015260005b81811015610ae55782810184015187820160c001528301610ac9565b50600060c08288010152606085015160608701526080850151608087015260c0601f19601f830116870101935050505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b7057603f19888603018452610b5e858351610a99565b94509285019290850190600101610b42565b5092979650505050505050565b602081526000610b906020830184610a99565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610bbf57600080fd5b813567ffffffffffffffff80821115610bd757600080fd5b818401915084601f830112610beb57600080fd5b813581811115610bfd57610bfd610b97565b604051601f8201601f19908116603f01168101908382118183101715610c2557610c25610b97565b81604052828152876020848701011115610c3e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561051a5761051a610c74565b600060018201610caf57610caf610c74565b5060010190565b8082018082111561051a5761051a610c74565b600081610cd857610cd8610c74565b506000190190565b634e487b7160e01b600052603160045260246000fd5b600181811c90821680610d0a57607f821691505b602082108103610d2a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d7a57600081815260208120601f850160051c81016020861015610d575750805b601f850160051c820191505b81811015610d7657828155600101610d63565b5050505b505050565b815167ffffffffffffffff811115610d9957610d99610b97565b610dad81610da78454610cf6565b84610d30565b602080601f831160018114610de25760008415610dca5750858301515b600019600386901b1c1916600185901b178555610d76565b600085815260208120601f198616915b82811015610e1157888601518255948401946001909101908401610df2565b5085821015610e2f5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212202e9b32e39444800088374421a87c8ebf0254194874d3840d3cf05b48d23b912964736f6c63430008110033";

type SocialNetworkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SocialNetworkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SocialNetwork__factory extends ContractFactory {
  constructor(...args: SocialNetworkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SocialNetwork> {
    return super.deploy(overrides || {}) as Promise<SocialNetwork>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SocialNetwork {
    return super.attach(address) as SocialNetwork;
  }
  override connect(signer: Signer): SocialNetwork__factory {
    return super.connect(signer) as SocialNetwork__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SocialNetworkInterface {
    return new utils.Interface(_abi) as SocialNetworkInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SocialNetwork {
    return new Contract(address, _abi, signerOrProvider) as SocialNetwork;
  }
}
